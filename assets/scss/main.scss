// ---------------------------------------------------------
// 1. Variables y Mapas
// Variables: almacenan valores reutilizables, como colores o tamaños.
// Mapas: colecciones de pares clave-valor, útiles para agrupar datos relacionados.
// ---------------------------------------------------------

@use 'sass:color';
@use 'sass:math';
@use 'sass:map';
@use 'variables' as *;

// Mapa para colores de botones, que permite acceso dinámico por clave
$btn-colors: (
  primary: $primary-color,
  secondary: $secondary-color,
  white: $white,
  black: $black
);

// ---------------------------------------------------------
// 2. Mixins y Funciones
// Mixins: fragmentos reutilizables de código CSS que pueden aceptar parámetros.
// Funciones: devuelven un valor basado en la lógica interna, similar a funciones en programación.
// ---------------------------------------------------------

// Mixin para centrar elementos con Flexbox
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Función que obtiene un color del mapa $btn-colors según la clave dada
@function btn-color($key) {
  @return map.get($btn-colors, $key);
}

// ---------------------------------------------------------
// 3. Base (Nesting y operadores)
// Nesting: anidar selectores dentro de otros para mejor organización y evitar repetición.
// Operador &: referencia al selector padre, útil para estados o variantes.
// ---------------------------------------------------------

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Helvetica', sans-serif;
  line-height: 1.6;
  color: $black;
  background-color: $white;
}

a {
  text-decoration: none;
  color: inherit;

  &:hover { // &:hover significa "a:hover"
    color: btn-color(primary);
  }
}

img {
  max-width: 100%;
  display: block;
}

.container {
  width: 90%;
  max-width: $container-width;
  margin: 0 auto;
}

// ---------------------------------------------------------
// 4. Botones (Uso de & y mixins)
// Uso del operador & para variantes de botones, y mixins para estilos reutilizables.
// ---------------------------------------------------------

.btn {
  @include flex-center;
  padding: 0.75rem 1.5rem;
  border: none;
  cursor: pointer;
  text-align: center;
  border-radius: 4px;
  transition: background-color 0.3s ease, color 0.3s ease;

  &--primary { // variante primaria: .btn--primary
    background-color: $blue-rgb;
    color: $white;

    &:hover { // hover para variante primaria
      background-color: color.adjust(btn-color(primary), $lightness: -10%);
      color: $white; // Mantener texto blanco
    }
  }

  &--secondary { // variante secundaria: .btn--secondary
    background-color: btn-color(secondary);
    color: $white;

    &:hover {
      background-color: color.adjust(btn-color(secondary), $lightness: -10%);
      color: $white;
    }
  }

  &--full { // botón que ocupa todo el ancho
    width: 100%;
  }
}

// ---------------------------------------------------------
// 5. Header (Nesting, operador & y media queries)
// Media Queries: reglas CSS que se aplican según el tamaño de pantalla para diseño responsivo.
// ---------------------------------------------------------

.header {
  background-color: $white;
  padding: 1rem 0;
  box-shadow: 0 2px 4px rgba($black, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;

  &__container { // Anidado para elementos hijos, ejemplo BEM
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  &__logo {
    font-size: 1.5rem;
    font-weight: bold;
  }

  &__menu-btn {
    display: none;
    background: none;
    border: none;
  }

  .nav {
    display: flex;
    gap: 1rem;

    &__link {
      padding: 0.5rem 1rem;
      transition: color 0.3s;

      &:hover {
        color: $primary-color;
      }
    }
  }

  // Media Query para dispositivos móviles
  @media (max-width: 768px) {
    &__menu-btn {
      display: block;
    }

    .nav {
      display: none;
      flex-direction: column;
      position: absolute;
      top: 100%;
      right: 1rem;
      background: $white;
      box-shadow: 0 2px 4px rgba($black, 0.1);

      &__link {
        display: block;
      }
    }

    .nav.active {
      display: flex;
    }
  }
}

// ---------------------------------------------------------
// 6. Hero (Nesting, operador &, color.adjust y mixins)
// Uso de funciones para manipular colores, y mixins para layout
// ---------------------------------------------------------

.hero {
  position: relative;
  background: url('../img-home1.png') center/cover no-repeat;
  height: 80vh;
  color: $white;
  @include flex-center;
  align-items: center;

  &__content {
    z-index: 1;
    max-width: 600px;
  }

  &__title {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  &__text {
    margin-bottom: 2rem;
  }

  &__overlay {
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba($black, 0.5);
    z-index: 0;
  }
}

// ---------------------------------------------------------
// 7. Servicios (grid, nesting)
// CSS Grid para layouts y nesting para estructura semántica
// ---------------------------------------------------------

.servicios {
  padding: 4rem 0;
  background: $gray;

  &__grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
  }

  .servicio {
    background: $white;
    padding: 2rem;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba($black, 0.1);

    &__title {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
    }

    &__desc {
      color: #333;
    }
  }
}

.section-title {
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 1.5rem;
  color: $primary-color;
  text-align: center;
}

// ---------------------------------------------------------
// 8. Portafolio (transiciones, nesting, operador &)
// Transiciones para animaciones suaves, nesting para organización
// ---------------------------------------------------------

.portafolio {
  background: $primary-color;
  padding: 4rem 0;
  color: $white;

  &__grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  &__item {
    background: $white;
    color: $black;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba($black, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 10px;
    
    &:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba($black, 0.3);
    }

    img {
      width: 100%;
      display: block;
    }
  }

  // Sal del contexto &__item para no crear ____ dobles
  &__item-info {
    padding: 1rem;
  }

  &__item-title {
    margin: 0.5rem 0;
    font-weight: bold;
  }

  &__item-desc {
    font-size: 0.9rem;
    // Cambia darken() por color.adjust()
    color: color.adjust($black, $lightness: -20%);
  }
}



// ---------------------------------------------------------
// 9. Nosotros (centrado, nesting)
// ---------------------------------------------------------

.nosotros {
  padding: 4rem 0;

  &__content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  &__text {
    font-size: 1.1rem;
    line-height: 1.8;
  }
}

// ---------------------------------------------------------
// 10. Contacto (centrado, nesting)
// ---------------------------------------------------------

.contacto {
  background: $primary-color;
  padding: 4rem 0;
  color: $white;

  &__content {
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
  }

  &__text {
    margin-bottom: 2rem;
  }

  &__form {
    text-align: left;

    // Estilos para inputs, reutilizando clases con nesting
    .input {
      width: 100%;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      font-family: inherit;
      margin-bottom: 1rem;
      height: 3rem;
      line-height: 1.5;
    }

    textarea.input {
      height: auto;
      min-height: 6rem;
      resize: vertical;
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
    }
  }
}

// ---------------------------------------------------------
// 11. Footer (simple)
// ---------------------------------------------------------

.footer {
  text-align: center;
  padding: 1rem;
  background: $black;
  color: $white;
}
